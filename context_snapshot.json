{
  "files": {
    "AGENTS.md": "# Agent Instructions\n\nRun `./init.sh` before any development. The script prints every Markdown file so you ingest the project context, installs Python requirements, and sets up pre-commit hooks. Keep all documentation synchronized with code so future agents stay aware of the project state. When introducing new features or refactoring\u2014even without explicit user prompts\u2014add tests, bump the version, and document the behavior.\n\n`init.sh` also generates `context_snapshot.md`, `context_snapshot.json`, `code_snapshot.md`, and `code_snapshot.json`. Ensure these files are regenerated and committed whenever documentation or source code changes.\n\nFrom the repository root execute:\n\n1. `./init.sh`\n2. `pre-commit run --all-files`\n3. `ruff check ZDownloadManager`\n4. `python -m py_compile $(find ZDownloadManager -name '*.py')`\n5. `(cd ZDownloadManager && python -m zdownloadmanager.cli --help)`\n6. `(cd ZDownloadManager && python -m unittest discover tests -v)`\n\nAll changes must update relevant documentation and maintain version numbers.\n\nSet `GITHUB_TOKEN` when using the GitHub automation scripts or tests that\ninteract with the GitHub API.",
    "README.md": "# ZDownload\n\nZDownloadManager is a cross-platform download manager and smart file organiser with resume support, mirror fallback and Chrome integration. The application source lives in the `ZDownloadManager/` directory.\n\n## Features\n- Resumable downloads with SHA-256 piece verification\n- Multi-source downloading with automatic mirror fallback\n- Library manager that categorises completed downloads\n- Smart filename normalisation and configurable actions\n- Optional Chrome extension for browser integration\n- OS integration scripts under `ZDownloadManager/install` for Chrome native messaging\n  and system context menus on Windows and macOS\n- In-app configuration menu to adjust piece size, concurrency, suggestions and\n  the OpenRouter API key\n- LLM-backed suggestion system with on-disk caching\n- Customisable OpenRouter model via `--suggest-model` or config\n- Configurable suggestion parameters via `--suggest-temperature`, `--suggest-max-tokens` and `--suggest-top-p`\n- `--version` and `--show-config` CLI options for introspection\n- `--list-models` flag or `scripts/openrouter_models.py` to list OpenRouter models\n- Web scraping helper via `--scrape` to list page links\n- GitHub automation helper via `scripts/github_tools.py` to commit files, open pull requests, list issues, list pull requests, and show repository languages\n- `--clear-suggestions-cache` flag to purge cached AI responses\n- `--suggest-stream` to stream AI answers for a question\n- `--show-suggestions-cache` flag to inspect cached AI responses\n- Code scanning script `scripts/code_scan.py` and `--context` Makefile target to summarise classes and functions for agents\n- Snapshot helpers `--show-context-snapshot`, `--show-code-snapshot` and `--verify-snapshots` for context awareness\n- Dependency-aware context snapshot that maps Python imports to highlight affected files\n- `--show-dependencies` and `--show-dependents` flags to query module relationships from the context snapshot\n\n## Initialization\n```bash\n./init.sh\n```\nThe script displays every Markdown file so contributors ingest the current context, installs all Python requirements and sets up pre-commit hooks. It also generates a `context_snapshot` capturing documentation, a Python dependency graph and recent commit history. Update the documentation whenever behaviour changes so subsequent agents remain informed.\nIt also writes `code_snapshot` files that summarise classes and functions across the repository for quick reference.\n\n## Usage\n```bash\n# Start the graphical interface\npython -m zdownloadmanager.ui.main_window\n\n# Or use the CLI\npython -m zdownloadmanager.cli --help\n\n# Ask the AI a question\npython -m zdownloadmanager.cli --suggest \"What is this project?\"\n# Ask using a specific model\npython -m zdownloadmanager.cli --suggest \"What is this project?\" --suggest-model openai/gpt-4o-mini\n# Stream an answer\npython -m zdownloadmanager.cli --suggest-stream \"What is this project?\"\n# Tune suggestion parameters\npython -m zdownloadmanager.cli --suggest \"What is this project?\" --suggest-temperature 0.5 --suggest-max-tokens 50 --suggest-top-p 0.9\n\n# Inspect current configuration\npython -m zdownloadmanager.cli --show-config\n\n# List available OpenRouter models\npython -m zdownloadmanager.cli --list-models\n\n# Print version\npython -m zdownloadmanager.cli --version\n\n# Scrape links from a page\npython -m zdownloadmanager.cli --scrape https://httpbin.org/links/5/0\n\n# Clear cached suggestions\npython -m zdownloadmanager.cli --clear-suggestions-cache\n\n# Show cached suggestions\npython -m zdownloadmanager.cli --show-suggestions-cache\n\n# Display context snapshot\npython -m zdownloadmanager.cli --show-context-snapshot\n\n# Display code snapshot\npython -m zdownloadmanager.cli --show-code-snapshot\n\n# Verify snapshots are current\npython -m zdownloadmanager.cli --verify-snapshots\n\n# Show dependencies for the CLI module\npython -m zdownloadmanager.cli --show-dependencies ZDownloadManager/zdownloadmanager/cli.py\n\n# Show modules that depend on the config module\npython -m zdownloadmanager.cli --show-dependents ZDownloadManager/zdownloadmanager/core/config.py\n\n# List library contents\npython -m zdownloadmanager.cli --list-library\n\n# Search library for files containing \"foo\"\npython -m zdownloadmanager.cli --search-library foo\n\n# Show counts per category and tag\npython -m zdownloadmanager.cli --library-stats\n```\n\n## GitHub Automation\nUse `scripts/github_tools.py` for basic repository automation. Set the\n`GITHUB_TOKEN` environment variable to a personal access token with\nrepository permissions.\n\n```bash\n# Create or update a file\nGITHUB_TOKEN=xxx python scripts/github_tools.py commit-file owner/repo path/to/file \"message\" \"content\"\n\n# Open a pull request\nGITHUB_TOKEN=xxx python scripts/github_tools.py create-pr owner/repo \"Title\" user:branch --body \"description\"\n\n# List open issues\nGITHUB_TOKEN=xxx python scripts/github_tools.py list-issues owner/repo --limit 5\n\n# List open pull requests\nGITHUB_TOKEN=xxx python scripts/github_tools.py list-prs owner/repo --limit 5\n\n# Show repository languages\nGITHUB_TOKEN=xxx python scripts/github_tools.py list-languages owner/repo\n```\n\n## Testing\nRun the test suite:\n```bash\npython -m unittest discover ZDownloadManager/tests -v\n```\n\nSee [`ZDownloadManager/README.md`](ZDownloadManager/README.md) for full details and packaging notes.\n\n## Development\nRun style and lint checks via [pre-commit](https://pre-commit.com/):\n```bash\npre-commit run --all-files\n```\n\nWhen adding new features or refactoring, include tests and documentation to guide future agents.\nThe `Makefile` mirrors these commands with shortcuts (`make lint`, `make test`, `make context`, `make models`, `make check`). `make context` regenerates both context and code snapshots.\n\n`make check` runs linting, compilation, context snapshot verification, CLI inspection and the unit test suite in one step.\n\nThe snapshot intentionally omits the most recent commit in its log so the `--check` verification remains stable after commits.\n\nCurrent version: 0.1.28",
    "ZDownloadManager/README.md": "ZDownloadManager\n=================\n\n**Version 0.1.28**\n\nZDownloadManager is a cross\u2011platform download manager and smart file organizer designed to run on\nWindows and macOS. It features:\n\n* **Resumable downloads:** Download files from one or more mirrors. If the connection is\n  interrupted the manager will use HTTP\u00a0Range requests to resume from exactly where\n  it left off. When Range support is unavailable, it falls back to a sequential\n  streaming mode. This technique is part of the HTTP specification and allows\n  partial content retrieval.\n* **Byte\u2011level verification:** Each download is split into pieces and hashed\n  using SHA\u2011256. When resuming, pieces are validated on disk and requeued if\n  corrupt.\n* **Multi\u2011source support:** Supply a list of mirror URLs separated by commas. If one\n  server fails to deliver a piece the next mirror is tried automatically.\n* **Library manager:** Once a download completes it is automatically\n  organised into logical categories (programs, packages, other files) and indexed in\n  a library. Categories and tags can be defined and adjusted by the user.\n* **Smart renaming:** Filenames are normalised by replacing underscores and\n  hyphens with spaces and heuristically inserting a `v`\n  prefix before version numbers. This produces consistently readable names (for\n  example `my-file-1.0.zip` becomes `my file v1.0.zip`).\n* **Right\u2011click actions:** The library view exposes a configurable context menu.\n  Actions are defined in a JSON file and can launch external programs, run\n  scripts or display computed information. A built\u2011in editor allows editing\n  the actions from within the application.\n* **Chrome integration:** A native messaging host and a small MV3 extension\n  allow Chrome/Chromium to hand off downloads to ZDownloadManager. To install\n  the native host, run the appropriate script in `install/` and load the\n  extension from `chrome_extension/`.\n* **Comprehensive configuration:** An in\u2011app Config menu lets you adjust piece\n  size, concurrency, library roots, context menu actions, suggestions and the\n  OpenRouter API key.\n* **LLM suggestions:** Query OpenRouter for contextual file information with\n  on\u2011disk caching to avoid repeated requests.\n* **Streamed suggestions:** `--suggest-stream` streams AI responses as they arrive.\n* **Model selection:** Override the OpenRouter model with `--suggest-model` or\n  via the configuration menu.\n* **Parameter control:** Adjust `temperature`, `max_tokens` and `top_p` via `--suggest-temperature`, `--suggest-max-tokens` and `--suggest-top-p`.\n* **CLI introspection:** `--version` prints the package version and\n  `--show-config` dumps the active configuration.\n* **Model listing:** `--list-models` fetches available OpenRouter models.\n* **Web scraping:** `--scrape` prints links discovered on a web page.\n* **Cache management:** `--clear-suggestions-cache` deletes stored AI responses.\n* **Cache inspection:** `--show-suggestions-cache` prints stored AI responses.\n* **GitHub automation:** `scripts/github_tools.py` can commit files, open pull requests, list issues, list pull requests, and display repository languages.\n* **Code snapshotting:** `scripts/code_scan.py` summarises classes and functions across the project for agents.\n* **Snapshot helpers:** `--show-context-snapshot`, `--show-code-snapshot` and `--verify-snapshots` expose snapshot data and checks.\n* **Dependency mapping:** the context snapshot records Python import relationships so agents can see which files a change may impact.\n* **Dependency queries:** `--show-dependencies` and `--show-dependents` reveal module relationships from the context snapshot.\n\nGetting Started\n---------------\n\nFrom the repository root, run `./init.sh` to display project documentation, install all dependencies and pre-commit hooks. The script also writes `context_snapshot` and `code_snapshot` files; the context snapshot includes a dependency graph of Python imports. Alternatively, within this directory:\n\n```bash\npip install -r requirements.txt\n\n# Start the graphical application\npython -m zdownloadmanager.ui.main_window\n\n# Or use the CLI\nzdm https://example.com/file.iso -o /path/to/file.iso --mirrors https://mirror1.com/file.iso,https://mirror2.com/file.iso\n\n# Ask the AI a question\nzdm --suggest \"What is this project?\"\n# Use a specific model\nzdm --suggest \"What is this project?\" --suggest-model openai/gpt-4o-mini\n# Stream the response\nzdm --suggest-stream \"What is this project?\"\n# Tune suggestion parameters\nzdm --suggest \"What is this project?\" --suggest-temperature 0.5 --suggest-max-tokens 50 --suggest-top-p 0.9\n\n# List links from a page\nzdm --scrape https://httpbin.org/links/5/0\n\n# List available OpenRouter models\nzdm --list-models\n\n# Clear cached suggestions\nzdm --clear-suggestions-cache\n\n# Show cached suggestions\nzdm --show-suggestions-cache\n\n# Display context snapshot\nzdm --show-context-snapshot\n\n# Display code snapshot\nzdm --show-code-snapshot\n\n# Verify snapshots are current\nzdm --verify-snapshots\n\n# Show dependencies for the CLI module\nzdm --show-dependencies ZDownloadManager/zdownloadmanager/cli.py\n\n# Show modules that depend on the config module\nzdm --show-dependents ZDownloadManager/zdownloadmanager/core/config.py\n\n# List library contents\nzdm --list-library\n\n# Search library for files containing \"foo\"\nzdm --search-library foo\n\n# Show counts per category and tag\nzdm --library-stats\n```\n\nGitHub Automation\n-----------------\n\nBasic GitHub interactions are available via `scripts/github_tools.py`.\nSet `GITHUB_TOKEN` to a personal access token with repository scope.\n\n```bash\n# Commit a file\nGITHUB_TOKEN=xxx python ../scripts/github_tools.py commit-file owner/repo path \"message\" \"content\"\n\n# Open a pull request\nGITHUB_TOKEN=xxx python ../scripts/github_tools.py create-pr owner/repo \"Title\" user:branch --body \"description\"\n\n# List open issues\nGITHUB_TOKEN=xxx python ../scripts/github_tools.py list-issues owner/repo --limit 5\n\n# List open pull requests\nGITHUB_TOKEN=xxx python ../scripts/github_tools.py list-prs owner/repo --limit 5\n\n# Show repository languages\nGITHUB_TOKEN=xxx python ../scripts/github_tools.py list-languages owner/repo\n```\n\nThe first time you run the GUI, a configuration directory is created in a\nplatform\u2011appropriate location. You can customise library roots, piece size,\nconcurrency, categories, actions, suggestion preferences and the OpenRouter\nAPI key via the **Config** menu.\n\nTesting\n-------\n\nRun the unit test suite with:\n\n```bash\npython -m unittest discover tests -v\n```\n\nPackaging & Distribution\n------------------------\n\nTo produce a stand\u2011alone build for Windows or macOS you can use\nPyInstaller. The project intentionally avoids external native dependencies to\nease packaging. Building the installer is left to distribution tools like\nInno\u00a0Setup (Windows) or a macOS `pkg`. The `chrome_extension/` directory\ncontains an example MV3 extension and the `install/` folder has scripts to\ninstall the native messaging host. See their individual readme comments for\ndetails.\n\nDevelopment\n-----------\n\nRun code style checks with [pre-commit](https://pre-commit.com/):\n\n```bash\npre-commit run --all-files\n```\n\nThe repository provides a `Makefile` with shortcuts for common tasks:\n\n```bash\nmake lint     # run pre-commit hooks\nmake test     # run unit tests\nmake context  # regenerate context and code snapshots\nmake models   # list available OpenRouter models\nmake check    # run linting, context snapshot check, compilation, CLI help and tests\n```\n\nWhen adding new features or refactoring, update the documentation and tests so future agents understand the changes.\n\n\nLicense\n-------\n\nThis software is distributed as free software. Feel free to modify and\nredistribute it under the terms of the MIT license.",
    "ZDownloadManager/install/macos_quick_action.md": "## macOS Quick Action for ZDownloadManager\n\nTo add a Finder Quick Action that sends files to ZDownloadManager:\n\n1. Open **Automator** and create a new **Quick Action**.\n2. Set **Workflow receives current** to *files or folders* in *Finder*.\n3. From the **Actions** library search for **Run Shell Script** and drag it to the workflow.\n4. Set **Shell** to `/bin/bash` and **Pass input** to `as arguments`.\n5. Replace the script body with:\n\n   ```bash\n   for f in \"$@\"; do\n       python3 -m zdownloadmanager.cli \"$f\"\n   done\n   ```\n\n6. Save the Quick Action with a name like **Send to ZDownloadManager**.\n\nAfter saving, right\u2011click any file in Finder and choose **Quick Actions \u2192 Send to ZDownloadManager** to organise it via the command line.",
    "code_snapshot.md": "# Code Snapshot\n\n## ZDownloadManager/tests/__init__.py\n\n## ZDownloadManager/tests/test_cli.py\n- class CLITests\n  - test_version_flag(self)\n  - test_show_config(self)\n  - test_show_snapshots(self)\n  - test_verify_snapshots(self)\n  - test_list_models(self)\n  - test_dependency_queries(self)\n\n## ZDownloadManager/tests/test_code_scanner.py\n- test_code_scanner_generates_summary(tmp_path)\n\n## ZDownloadManager/tests/test_config.py\n- class ConfigTests\n  - test_update_and_reload(self)\n\n## ZDownloadManager/tests/test_context_snapshot.py\n- class ContextSnapshotTest\n  - test_snapshot_created(self)\n\n## ZDownloadManager/tests/test_downloader.py\n- class DownloaderTests\n  - test_download_example(self)\n\n## ZDownloadManager/tests/test_github_adapter.py\n- class GitHubAdapterTests\n  - test_get_repo_info(self)\n  - test_list_open_issues(self)\n  - test_list_open_pull_requests(self)\n  - test_list_languages(self)\n\n## ZDownloadManager/tests/test_library_cli.py\n- setup_home(tmp_path)\n- test_library_scan_and_search(tmp_path)\n- test_cli_list_and_search(tmp_path)\n- test_cli_library_stats(tmp_path)\n\n## ZDownloadManager/tests/test_openrouter_models.py\n- class OpenRouterModelsTest\n  - test_models_fetch(self)\n\n## ZDownloadManager/tests/test_organizer.py\n- class OrganizerTests\n  - test_normalize_filename(self)\n\n## ZDownloadManager/tests/test_scraper.py\n- class ScraperTests\n  - test_example_com(self)\n\n## ZDownloadManager/tests/test_suggestions_cache.py\n- class SuggestionCacheTest\n  - test_cache_reuse_without_key(self)\n  - test_cli_show_cache(self)\n  - test_custom_model(self)\n  - test_cli_custom_model(self)\n  - test_cli_custom_params(self)\n  - test_streaming(self)\n  - test_cli_stream(self)\n\n## ZDownloadManager/zdownloadmanager/__init__.py\n\n## ZDownloadManager/zdownloadmanager/cli.py\n- main(argv)\n\n## ZDownloadManager/zdownloadmanager/core/config.py\n- _platform_config_dir()\n- class Config\n  - __init__(self, path)\n  - load(self)\n  - save(self)\n  - piece_size(self)\n  - concurrency(self)\n  - library_roots(self)\n  - categories(self)\n  - actions(self)\n  - custom_openers(self)\n  - suggestions_enabled(self)\n  - openrouter_api_key(self)\n  - openrouter_model(self)\n  - openrouter_temperature(self)\n  - openrouter_max_tokens(self)\n  - openrouter_top_p(self)\n  - last_version(self)\n  - cache_dir(self)\n  - update(self, **kwargs)\n\n## ZDownloadManager/zdownloadmanager/core/downloader.py\n- class Piece\n- class DownloadError\n- class SegmentedDownloader\n  - __init__(self, urls, dest, piece_size, concurrency, timeout, user_agent)\n  - _init_db(self)\n  - _get_meta(self, key)\n  - _set_meta(self, key, value)\n  - _enumerate_pieces(self, file_size)\n  - _load_pieces(self)\n  - _save_piece(self, piece)\n  - _probe_server(self, url)\n  - download(self)\n  - _sequential_download(self, file_size)\n\n## ZDownloadManager/zdownloadmanager/core/github_adapter.py\n- class GitHubAdapter\n  - __init__(self, token)\n  - get_repo_info(self, full_name)\n  - commit_file(self, repo_full_name, path, content, message, branch)\n  - create_pull_request(self, repo_full_name, title, body, head, base)\n  - list_open_issues(self, repo_full_name, limit)\n  - list_open_pull_requests(self, repo_full_name, limit)\n  - list_languages(self, repo_full_name)\n\n## ZDownloadManager/zdownloadmanager/core/library.py\n- class Library\n  - __init__(self, config)\n  - _load_tags(self)\n  - _save_tags(self)\n  - scan(self)\n  - search(self, query)\n  - stats(self)\n  - set_tags(self, path, tags)\n  - add_tag(self, path, tag)\n  - remove_tag(self, path, tag)\n\n## ZDownloadManager/zdownloadmanager/core/organizer.py\n- class Organizer\n  - __init__(self, config)\n  - normalize_filename(self, filename)\n  - determine_category(self, filename)\n  - organise(self, path)\n\n## ZDownloadManager/zdownloadmanager/core/scraper.py\n- scrape_links(url, extensions)\n\n## ZDownloadManager/zdownloadmanager/core/suggestions.py\n- _cache_file(config)\n- read_cache(config)\n- clear_cache(config)\n- get_suggestion(config, question, model)\n- stream_suggestion(config, question, model)\n\n## ZDownloadManager/zdownloadmanager/integration/native_messaging_host.py\n- read_message()\n- write_message(msg)\n- main()\n\n## ZDownloadManager/zdownloadmanager/integration/protocol_handler.py\n- main(argv)\n\n## ZDownloadManager/zdownloadmanager/ui/actions_editor.py\n- class ActionsEditor\n  - __init__(self, config, parent)\n  - save(self)\n\n## ZDownloadManager/zdownloadmanager/ui/main_window.py\n- main()\n- class DownloadWorker\n  - __init__(self, urls, dest, cfg)\n  - run(self)\n- class MainWindow\n  - __init__(self)\n  - _setup_ui(self)\n  - _setup_download_tab(self)\n  - _setup_library_tab(self)\n  - reload_config(self)\n  - edit_actions(self)\n  - set_piece_size(self)\n  - set_concurrency(self)\n  - toggle_suggestions(self, checked)\n  - set_openrouter_api_key(self)\n  - browse_dest(self)\n  - add_download(self)\n  - on_download_progress(self, item, done, total)\n  - on_download_finished(self, item, new_path, error)\n  - refresh_library(self)\n  - on_tree_context_menu(self, pos)\n  - on_tree_selection_changed(self)\n  - open_file(self, path)\n  - reveal_file(self, path)\n  - add_tag_dialog(self, path)\n  - run_action(self, path, cmd_template)\n  - run_custom_opener(self, path, opener)\n  - rename_file(self, path)\n  - delete_file(self, path)\n  - choose_library_root(self)\n\n## scripts/code_scan.py\n- format_args(args)\n- scan_file(path)\n- generate_summary(root)\n- build_markdown(summary)\n- main()\n\n## scripts/context_snapshot.py\n- build_dependency_map()\n- generate_snapshot()\n- main()\n\n## scripts/github_tools.py\n- main()\n\n## scripts/llm_suggest.py\n- main()\n\n## scripts/openrouter_models.py\n- main()"
  },
  "dependencies": {
    "scripts/context_snapshot.py": [],
    "scripts/llm_suggest.py": [],
    "scripts/github_tools.py": [],
    "scripts/openrouter_models.py": [],
    "scripts/code_scan.py": [],
    "ZDownloadManager/tests/test_organizer.py": [],
    "ZDownloadManager/tests/__init__.py": [],
    "ZDownloadManager/tests/test_library_cli.py": [],
    "ZDownloadManager/tests/test_code_scanner.py": [],
    "ZDownloadManager/tests/test_openrouter_models.py": [],
    "ZDownloadManager/tests/test_scraper.py": [],
    "ZDownloadManager/tests/test_github_adapter.py": [],
    "ZDownloadManager/tests/test_downloader.py": [],
    "ZDownloadManager/tests/test_config.py": [],
    "ZDownloadManager/tests/test_context_snapshot.py": [],
    "ZDownloadManager/tests/test_cli.py": [],
    "ZDownloadManager/tests/test_suggestions_cache.py": [],
    "ZDownloadManager/zdownloadmanager/__init__.py": [],
    "ZDownloadManager/zdownloadmanager/cli.py": [
      "ZDownloadManager/zdownloadmanager/core/config.py",
      "ZDownloadManager/zdownloadmanager/core/downloader.py",
      "ZDownloadManager/zdownloadmanager/core/library.py",
      "ZDownloadManager/zdownloadmanager/core/organizer.py",
      "ZDownloadManager/zdownloadmanager/core/scraper.py",
      "ZDownloadManager/zdownloadmanager/core/suggestions.py"
    ],
    "ZDownloadManager/zdownloadmanager/integration/protocol_handler.py": [
      "ZDownloadManager/zdownloadmanager/cli.py"
    ],
    "ZDownloadManager/zdownloadmanager/integration/native_messaging_host.py": [
      "ZDownloadManager/zdownloadmanager/cli.py"
    ],
    "ZDownloadManager/zdownloadmanager/core/scraper.py": [],
    "ZDownloadManager/zdownloadmanager/core/organizer.py": [
      "ZDownloadManager/zdownloadmanager/core/config.py"
    ],
    "ZDownloadManager/zdownloadmanager/core/library.py": [
      "ZDownloadManager/zdownloadmanager/core/config.py",
      "ZDownloadManager/zdownloadmanager/core/organizer.py"
    ],
    "ZDownloadManager/zdownloadmanager/core/suggestions.py": [
      "ZDownloadManager/zdownloadmanager/core/config.py"
    ],
    "ZDownloadManager/zdownloadmanager/core/downloader.py": [],
    "ZDownloadManager/zdownloadmanager/core/github_adapter.py": [],
    "ZDownloadManager/zdownloadmanager/core/config.py": [],
    "ZDownloadManager/zdownloadmanager/ui/actions_editor.py": [
      "ZDownloadManager/zdownloadmanager/core/config.py"
    ],
    "ZDownloadManager/zdownloadmanager/ui/main_window.py": [
      "ZDownloadManager/zdownloadmanager/core/config.py",
      "ZDownloadManager/zdownloadmanager/core/downloader.py",
      "ZDownloadManager/zdownloadmanager/core/library.py",
      "ZDownloadManager/zdownloadmanager/core/organizer.py",
      "ZDownloadManager/zdownloadmanager/core/suggestions.py",
      "ZDownloadManager/zdownloadmanager/ui/actions_editor.py"
    ]
  },
  "log": "39e730b Add files via upload\na300fa5 Initial commit\n",
  "status": " M README.md\n M ZDownloadManager/README.md\n M ZDownloadManager/pyproject.toml\n M ZDownloadManager/tests/test_cli.py\n M ZDownloadManager/zdownloadmanager/__init__.py\n M ZDownloadManager/zdownloadmanager/cli.py\n M code_snapshot.json\n M code_snapshot.md\n M context_snapshot.json\n M context_snapshot.md\n?? ZDownloadManager/tests/__pycache__/\n?? ZDownloadManager/zdownloadmanager/__pycache__/\n?? ZDownloadManager/zdownloadmanager/core/__pycache__/\n?? ZDownloadManager/zdownloadmanager/integration/__pycache__/\n?? ZDownloadManager/zdownloadmanager/ui/__pycache__/\n"
}
